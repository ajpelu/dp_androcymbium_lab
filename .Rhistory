add_edge("event", "occurrences") |>
add_edge("event", "ExtendedMeasurement\nOrFacts")
# Render and display the diagram
render_graph(graph)
library(DiagrammeR)
dot_code <- "
digraph G {
subgraph cluster_0 {
label=\"Darwin Core Archive\"
color=lightgrey;
subgraph cluster_1 {
label=\"\"
node [style=filled, shape=box, fontname=Helvetica, color=\"#D6E1F1\"]
event -> occurrences;
event -> \"Extended measurement \\n or Facts\"
color=\"#41719C\"
}
subgraph cluster_2 {
label=\"\"
node [style=filled, shape=box, fontname=Helvetica, color=\"#5B9BD5\"]
\"meta.xml\" [shape=square]
\"eml.xml\" [shape=square]
}
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
subgraph cluster_0 {
label='Darwin Core Archive'
color=lightgrey;
subgraph cluster_1 {
label=\"\"
node [style=filled, shape=box, fontname=Helvetica, color=\"#D6E1F1\"]
event -> occurrences;
event -> \"Extended measurement \\n or Facts\"
color=\"#41719C\"
}
subgraph cluster_2 {
label=\"\"
node [style=filled, shape=box, fontname=Helvetica, color=\"#5B9BD5\"]
\"meta.xml\" [shape=square]
\"eml.xml\" [shape=square]
}
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
subgraph cluster_0 {
label='Darwin Core dddArchive'
color=lightgrey;
subgraph cluster_1 {
label=\"\"
node [style=filled, shape=box, fontname=Helvetica, color=\"#D6E1F1\"]
event -> occurrences;
event -> \"Extended measurement \\n or Facts\"
color=\"#41719C\"
}
subgraph cluster_2 {
label=\"\"
node [style=filled, shape=box, fontname=Helvetica, color=\"#5B9BD5\"]
\"meta.xml\" [shape=square]
\"eml.xml\" [shape=square]
}
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
subgraph cluster_0 {
label='Darwin Core Archive'
color=lightgrey;
subgraph cluster_1 {
node [style=filled, shape=box, fontname=Helvetica, color=\"#D6E1F1\"]
event -> occurrences;
event -> \"Extended measurement \\n or Facts\"
color=\"#41719C\"
}
subgraph cluster_2 {
label=\"\"
node [style=filled, shape=box, fontname=Helvetica, color=\"#5B9BD5\"]
\"meta.xml\" [shape=square]
\"eml.xml\" [shape=square]
}
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
subgraph cluster_0 {
label='Darwin Core Archive'
color=lightgrey;
subgraph cluster_1 {
node [style=filled, shape=box, fontname=Helvetica, color='#D6E1F1']
event -> occurrences;
event -> 'Extended measurement \\n or Facts'
color='#41719C'
}
subgraph cluster_2 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#5B9BD5']
'meta.xml' [shape=square]
'eml.xml' [shape=square]
}
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
subgraph cluster_0 {label=''
label='Darwin Core Archive'
color=lightgrey;
subgraph cluster_1 {
node [style=filled, shape=box, fontname=Helvetica, color='#D6E1F1']
event -> occurrences;
event -> 'Extended measurement \\n or Facts'
color='#41719C'
}
subgraph cluster_2 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#5B9BD5']
'meta.xml' [shape=square]
'eml.xml' [shape=square]
}
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
subgraph cluster_0 {
label='Darwin Core Archive'
color=lightgrey;
subgraph cluster_1 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#D6E1F1']
event -> occurrences;
event -> 'Extended measurement \\n or Facts'
color='#41719C'
}
subgraph cluster_2 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#5B9BD5']
'meta.xml' [shape=square]
'eml.xml' [shape=square]
}
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
rankdir =LR;
subgraph cluster_0 {
label='Darwin Core Archive'
color=lightgrey;
subgraph cluster_1 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#D6E1F1']
event -> occurrences;
event -> 'Extended measurement \\n or Facts'
color='#41719C'
}
subgraph cluster_2 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#5B9BD5']
'meta.xml' [shape=square]
'eml.xml' [shape=square]
}
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
rankdir =TB;
subgraph cluster_0 {
label='Darwin Core Archive'
color=lightgrey;
subgraph cluster_1 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#D6E1F1']
event -> occurrences;
event -> 'Extended measurement \\n or Facts'
color='#41719C'
}
subgraph cluster_2 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#5B9BD5']
'meta.xml' [shape=square]
'eml.xml' [shape=square]
}
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
rankdir =BT;
subgraph cluster_0 {
label='Darwin Core Archive'
color=lightgrey;
subgraph cluster_1 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#D6E1F1']
event -> occurrences;
event -> 'Extended measurement \\n or Facts'
color='#41719C'
}
subgraph cluster_2 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#5B9BD5']
'meta.xml' [shape=square]
'eml.xml' [shape=square]
}
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
rankdir = 'LR';
fontsize=12;
label='Darwin Core Archive';
color=lightgrey;
subgraph cluster_1 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#D6E1F1']
event -> occurrences;
event -> 'Extended measurement \\n or Facts'
color='#41719C'
}
subgraph cluster_2 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#5B9BD5']
'meta.xml' [shape=square]
'eml.xml' [shape=square]
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
graph [fontsize=12;
label='Darwin Core Archive';
color=lightgrey];
subgraph cluster_1 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#D6E1F1']
event -> occurrences;
event -> 'Extended measurement \\n or Facts'
color='#41719C'
}
subgraph cluster_2 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#5B9BD5']
'meta.xml' [shape=square]
'eml.xml' [shape=square]
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
label=\"Darwin Core\";
// Create a rectangle around the entire graph
subgraph cluster_main {
label=\"\"
color=black;
style=dotted;
node [shape=point, width=0, height=0];
dummy [label=\"\", width=1, height=1, style=invis];
}
subgraph cluster_1 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#D6E1F1']
event -> occurrences;
event -> 'Extended measurement \\n or Facts'
color='#41719C'
}
subgraph cluster_2 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#5B9BD5']
'meta.xml' [shape=square]
'eml.xml' [shape=square]
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
label=\"Darwin Core\";
// Create a rectangle around the entire graph
subgraph cluster_main {
label=\"\"
color=black;
style=dotted;
node [shape=point, width=0, height=0];
dummy [label=\"\", width=1, height=1, style=invis];
}
subgraph cluster_1 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#D6E1F1']
event -> occurrences;
event -> 'Extended measurement \\n or Facts'
color='#41719C'
}
subgraph cluster_2 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#5B9BD5']
'meta.xml' [shape=square]
'eml.xml' [shape=square]
}
{rank=same; cluster_1 cluster_2}
// Create edges from dummy node to the other clusters
dummy -> cluster_1 [style=invis];
dummy -> cluster_2 [style=invis];
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
subgraph cluster_big {
graph [class='dwa';
label='Darwin Core Archive';
color=lightgrey];
subgraph cluster_1 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#D6E1F1']
event -> occurrences;
event -> 'Extended measurement \\n or Facts'
color='#41719C'
}
subgraph cluster_2 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#5B9BD5']
'meta.xml' [shape=square]
'eml.xml' [shape=square]
}
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
subgraph cluster_big {
graph [class='dwa';
label='Darwin Core Archive';
color=lightgrey];
compound=true;
subgraph cluster_1 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#D6E1F1']
event -> occurrences;
event -> 'Extended measurement \\n or Facts'
color='#41719C'
}
subgraph cluster_2 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#5B9BD5']
'meta.xml' [shape=square]
'eml.xml' [shape=square]
}
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library(DiagrammeR)
dot_code <- "
digraph G {
subgraph cluster_big {
graph [class='dwa';
label='Darwin Core Archive';
color=lightgrey];
compound=true;
rankdir=LR;
subgraph cluster_1 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#D6E1F1']
event -> occurrences;
event -> 'Extended measurement \\n or Facts'
color='#41719C'
}
subgraph cluster_2 {
label=''
node [style=filled, shape=box, fontname=Helvetica, color='#5B9BD5']
'meta.xml' [shape=square]
'eml.xml' [shape=square]
}
}
}
"
# Render the diagram using grViz
grViz(dot_code)
styler:::style_selection()
library(DiagrammeR)
dot_code <- "
digraph G {
subgraph cluster_big {
graph [
class='dwa',
label='Darwin Core Archive',
color=lightgrey
];
compound=true;
rankdir=LR;
subgraph cluster_1 {
label='';
node [style=filled, shape=box, fontname=Helvetica, color='#D6E1F1'];
event -> occurrences;
event -> 'Extended measurement \\n or Facts';
color='#41719C';
}
subgraph cluster_2 {
label='';
node [style=filled, shape=box, fontname=Helvetica, color='#5B9BD5'];
'meta.xml' [shape=square];
'eml.xml' [shape=square];
}
}
}
"
# Render the diagram using grViz
grViz(dot_code)
library("tidyverse")
library("sf")
library("datamodelr")
gbif_url <- 'https://ipt.gbif.es/archive.do?r=amoladeras'
# Create a temporary directory for storing files
temp <- tempdir()
f <- paste0(temp, "/amoladeras.zip")
extract_dir <- paste0(temp, "/amoladeras")
# Download the dataset
download.file(gbif_url, destfile = f, method = "auto")
# Unzip the downloaded file
unzip(f, exdir = extract_dir)
# Display the list of extracted files
list.files(extract_dir)
# Read the occurrence, event, and extended measurementOrFact files
occ <- read_delim(file = paste0(extract_dir, "/occurrence.txt"))
event <- read_delim(file = paste0(extract_dir, "/event.txt"))
emof <- read_delim(file = paste0(extract_dir, "/extendedmeasurementorfact.txt"))
View(event)
View(emof)
View(emof)
View(occ)
View(emof)
# Filter events to obtain only the top-level plots
raw_plots <- event |>
filter(is.na(parentEventID)) |>
mutate(id_plot = str_remove(eventID, "CSIC-EEZ:SERPAM:AMOLADERAS_")) |>
dplyr::select(id_plot, eventID, fieldNumber, treatment_desc = fieldNotes, footprintWKT) |>
separate(fieldNumber, into = c("block", "treatment"), sep = " \\| ")
# Convert to spatial data if needed
geo_plots <- raw_plots |>
st_as_sf(wkt = "footprintWKT", crs = 25830)
# Create a dataframe without spatial information
plots <- raw_plots |> dplyr::select(-footprintWKT)
plots
# Filter events to obtain only quadrat-related data
raw_quadrats <- event |>
filter(samplingProtocol == "Quadrat count") |>
filter(parentEventID %in% plots$eventID) |>
mutate(id_quadrat = str_sub(eventID, -2)) |>
mutate(id_plot = str_remove(parentEventID, "CSIC-EEZ:SERPAM:AMOLADERAS_")) |>
dplyr::select(id_quadrat, id_plot, eventID, fieldNumber, treatment_desc = fieldNotes, footprintWKT) |>
separate(fieldNumber, into = c("block", "treatment"), sep = " \\| ")
# Convert to spatial data if needed
geo_quadrats <- raw_quadrats |>
st_as_sf(wkt = "footprintWKT", crs = 25830)
# Create a dataframe without spatial information
quadrats <- raw_quadrats |> dplyr::select(-footprintWKT)
rm(raw_quadrats)
library(grateful)
?cite_packages
